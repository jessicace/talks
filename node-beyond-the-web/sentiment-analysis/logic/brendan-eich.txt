Pentagon nurses take ‘zombie pandemic’ course to train for real life outbreaks https://t.co/A5gXczZyMs
@bcrypt @RTBALOL I keep hearing rumors of more stringent approaches coming, know anything? Canoe'ing @__apf__ for Chrome.
@RTBALOL D'oh, I see https://t.co/8hnJTduWPk resources being loaded via http not https. Cc'ing @bcrypt to foretell our mixed content plans.
@christi3k we had birds eating the leaves, d'oh.
@puellavulnerata may stop at Reed Richards stage. Beards are itchy!
@christi3k any problems with birds? Scarecrow didn't help here.
@puellavulnerata now going for Gandalf the White, myself.
@puellavulnerata alas Chris Lambert &amp; I both got grey.
@puellavulnerata Another chorus guy &amp; I were eyeing each other &amp; we said "you're over 25" at once; he had done bit part on "Cops: San Jose".
@puellavulnerata They let me in, I'm technically Generation Jones :-P. True story: I was in a young-adult 25+under "West Side Story" at 28.
@rikarends Obv. JS has a stdlib but it's small due to rush job / browser wars I, but even now TC39 is slow to grow it. Better than too fast.
@rikarends It's a trade-off -- you reuse too much and risk left-pad or (more mundane) need to fork and un-reuse. Copy early &amp; bugs copy too.
@wareFLO https://t.co/C6jDbiWCjN
@coopsource @brave We're dealing with this already by making exceptions where needed. But for this Electron job, non-GH experience unlikely.
@wareFLO Terrifying -- although an upgrade from Java :-P.
@naman34 @VisualCap not if robots make what's demanded. open system (insolation) so some say jobs not needed: make art, more leisure. wdyt?
@ErrataRob @htmlnate Finally, almost two decades on, CSS evolved to Turing completeness! Two things to fear now :-P.
How Machines Destroy and Create Jobs https://t.co/yrGOkA3SvB via @Visualcap
@IvanNietoS @js_dev could be; I'm an outlier, but FWIW I use FB a bit, therefore Messenger sporadically, and WA not at all (nor will I).
@DavidGranado I have open DM
@paul_btc @0xjosh @maidsafe @IPFSbot @SiaTechHQ Yeah, start from a clean slate. Use XML. My two cents! :-P
@chris_mahan @rnavaneethan @pfersht @timesofindia Can you screencap what you see in @brave and reply here? Thanks.
@jennschiffer I wish I had that much hair!
@brave @chris_mahan @rnavaneethan @pfersht @timesofindia Might be geo-IP coded to target only people on the sub-continent. Just a thought.
"At Last[pass]". As sung by Etta James, ofc.

https://t.co/8uIOXwqhPe
@xorscode @brave Do you have React and CSS/HTML/JS experience?
@Brave is hiring: 1st listing is for "Senior Software Engineer – Electron". Please see

https://t.co/7TonYki7tK
@hypirlink @brianloveswords @mindpivot So apples:apples share is not 15% less w/ @brave, it's ∞ times better than if we just block; 70% net.
@hypirlink @brianloveswords @mindpivot @brave So ad trials need publisher partners + advertisers on board, won't hold up 1.0 in late summer.
@hypirlink @brianloveswords @mindpivot Anyway, we're pre-1.0 at @brave, focused on speed/safety 1st, auto-micropay 2nd, &amp; anonymous ads 3rd.
@hypirlink @brianloveswords @mindpivot automated micropayments from users who have enough in their self- &amp; @brave-funded wallets so spend.
@hypirlink @brianloveswords @mindpivot So @brave aims at 70% revenue share for sites from indirect ads + gratis confirmation of direct ads +
@hypirlink @brianloveswords @mindpivot 1. We don't do ads yet. 2. Your indirect ad partners cost you &gt;=55%, vs &lt;=30% &amp; no tracking w/ @brave
@mindpivot @brianshumate @hypirlink @brave We're immune to botnets compared to bad old IE on Windows on AC-powered, broadband connected PCs.
@Jg_CMO @brave Just to be clear: https://t.co/FXRTHngQXw links to 0.11 -- it's out already, with LastPass support, off-by-default Flash, &amp;c.
@kesseljunkie French-Irish sithlord? If missing apostrophe.
@Jg_CMO @brave 0.11 out today ;-).
@kesseljunkie I missed most of the Clone Wars.
@xorscode @ClancyBrownNews If we had a part for him then definitely!
@horsplain_js @horse_js Context! It's like hay: you need more.
@corderophi678 @ClancyBrownNews I stopped watching TV around when that was on, haven't caught it. Worthwhile?
@briankardell @ClancyBrownNews Lost me at CW. He's in Daredevil too, no?

Sgt. Zim was robbed in last poll. Clancy &amp; Dean Norris ruled ST!
@jennschiffer No, but if you waive my twitter lesson fee I will tutor you on fine points of my tv/movie title abbreviation style ;-).
The Kurgan won, but by request, new candidates in a followup poll on top Clancy Brown roles (cc: @ClancyBrownNews):
@trhediger @NavyTimes Rank? She doesn't even rate.
@mindpivot @brianbondy @asadotzler Nope, bloat was not from security fixes.
@horse_js Neigh!
@xorscode @ClancyBrownNews Only had room for four, wanted to focus on lesser-known roles.
@brianloveswords @brianbondy @asadotzler If only we could blame the banks! Time to revive the SGI Futurist Programmers &amp; the Skinnyhackers.
@brianbondy @asadotzler Have to ask whether browsers today are 10-20x better than 12 years ago. If not, that size increase needs an excuse.
@asadotzler Need a taller tree ;-).
@asadotzler I was there for Firefox 1 :-P.  7zip on Windows was the only 4.5MB download package IIRC.
@asadotzler We haven't got to working on download size yet (cc: @brianbondy); as you know, Firefox got bigger. Electron is big, for sure.
Navy engineer sentenced for mishandling classified material https://t.co/R0ffoI1aVG
At Lastpass.

https://t.co/jZb3bjGeV4
@bcrypt my cat doing the same.
@dangillmor contracted out amirite?
@zooko This is actually quite rare in medical research.
@ErrataRob right; what's next step?
@NatalieStennet @ClancyBrownNews I had room only for 4, went for some underappreciated roles (one, anyway).
@NathanWBlair that's close to an idea we have for those who use other browsers for social sites but want @Brave for ad-clogged news sites.
@NathanWBlair browsers reject side-loading too, require install from official store. browser extension standards takes time &amp; market power.
@NathanWBlair big market-share browser needed first, no leverage otherwise. extensions validate build signatures to reject bootleg browsers.
@ErrataRob It's true: browser insurgents are on the march. You use @brave with its built-in no-JS already, right? @SwiftOnSecurity @bcrypt
@tryggth @sreekotay @pmarca @brave Touché!
@sreekotay @tryggth @pmarca @brave Funny thing about ugly unsafe C code -- it was prettier in the '70s!
@tryggth @sreekotay @pmarca @brave Evidence? Fire up devtools, Marc should too. It isn't JS, frameworks, or any one thing. Flash &amp; ads huge.
@sreekotay @tryggth @pmarca @brave I recall reading WW1 history and knowing whom to blame. Not trains, not guns. Humans in charge, as usual.
@bitstein @brave cool, we learn from uBO (I think that is what is shown here), and agree browser can make user sovereign of Web experience.
@sreekotay What's more, @tryggth named Mozilla so I think he isn't just blaming JS; else blame Netscape, @pmarca &amp; me but not Moz. @brave
@sreekotay @tryggth @pmarca @brave yup,JS is tool w/o moral agency, but even in memory bloat terms, fire up chrome devtools &amp; exculpate JS.
@Zertz @brave @Microsoft @lukemulks @Windows See https://t.co/6cypvqb5Yy from last year.
UNCOUNTED: The True Story of the California Primary #NakedCapitalism https://t.co/GiS8BxGO6n
@tryggth @sreekotay Firefox never had more than 27% market share. If you think JS is to blame, think again.

Ofc @pmarca should use @brave.
@Chris_arnade "Selfless", hah. They jumped on labor- and environmental-protection arbitrage via globalization. Noblesse oblige, what's that?
@rossnixon Thanks, definitely of interest.
@CurlyChimera Judging from sites that've tried blocking adblockers (traffic lower after), bad for Bild. I'll see what can be done in @brave.
@jeaber I cannot accept, but I will pass congrats on to Twitter friends who helped. System is opaque, but it reassures some who follow me.
@amuse Yeah, TSA fails all around.
The top-secret company making robots to replace fast-food workers is opening a restaurant https://t.co/SBeFYyYCPI via @techinsider
@amuse everyone except agents of the state are at airports.
@puellavulnerata @henriquefb6 @ErrataRob mystery man in suit at Schiphol was prolly not FBI, but who knows? https://t.co/mIzaI1gA7t
Disabled cancer patient slammed to the ground by TSA guards, lawsuit claims https://t.co/PpTRQ3qfOj
@_ericelliott help from within.
@rikarends did devtools have a compensating fix that needed to be removed too? but it didn't compensate in your base64 case?
@rikarends seems like a bug to me, FWIW.
@rikarends v8 bug on file?
@rikarends Cool. Interested in updates on this project when you have them. Thanks.
@dmarti @larakiara @AdblockPlus @firefox Doesn't stop @Brave either.
@rikarends just part of it :-|.
@rikarends what do other browsers do?
@larakiara @johnwilander @brave Sure, or just hearing if their plans have changed in a year. See my t/l for Sp tech sightings in the wild.
@johnwilander @larakiara More to it than 1st party hosting/proxying. If ad exchanges then malvertising. Exchanges need 3p tracking, period.
@johnwilander @larakiara It doesn't allow BT, VT attribution, and various ID syncs wanted to profile user across unrelated sites, so flops.
tl;dr I’m burying the lede with context and catch-up material first, so impatient or already-clued-in readers should skip to below the videos for today’s big news. Or just read Luke Wagner‘s blog post right now.

My Fluent 2015 “ECMAScript Harmony: Rise of the Compilers” talk given on April 21st:

It’s by now a cliché that JS has become the assembly language of the Web. Rather, JS is one syntax for a portable and safe machine language, let’s say. Today I’m pleased to announce that cross-browser work has begun on WebAssembly, a new intermediate representation for safe code on the Web.

What: WebAssembly, “wasm” for short, .wasm filename suffix, a new binary syntax for low-level safe code, initially co-expressive with asm.js, but in the long run able to diverge from JS’s semantics, in order to best serve as common object-level format for multiple source-level programming languages.

It’s crucial that wasm and asm stay equivalent for a decent interval, to support polyfilling of wasm support via JS. This remains crucial even as JS and asm.js evolve to sprout shared memory threads and SIMD support. Examples of possible longer-term divergence: zero-cost exceptions, dynamic linking, call/cc. Yes, we are aiming to develop the Web’s polyglot-programming-language object-file format.

Why: asm.js is great, but once engines optimize for it, the parser becomes the hot spot — very hot on mobile devices. Transport compression is required and saves bandwidth, but decompression before parsing hurts. A secondary consideration: JS has a few awkward corners even in its asm.js subset. Finally, once browsers support the WebAssembly syntax natively, JS and wasm can diverge, without introducing unsafe or inappropriate features into JS just for use by compilers sourcing a few radically different programming languages.

See the FAQ for more nuance and detail. No, JS isn’t going away in any foreseeable future. Yes, wasm should relieve JS from having to serve two masters. This is a win-win plan.

How: If you use Emscripten, then wasm support via a command-line flag will at first include and target the prototype polyfill. But as native wasm decoders appear in top engines (see the V8 native prototype decoder), Emscripten will auto-configure for best results. Another prototype: a JS AST compressor (encoder).

These prototypes will evolve and track draft specification changes as WebAssembly matures and receives progressively more developer testing. Other compilers than Emscripten, and other compiler frameworks than LLVM, will join the mix. I expect all engines will support fast native decoders. All these parts are means to the end of a common WebAssembly standard.

Who: A W3C Community Group, the WebAssembly CG, open to all. As you can see from the github logs, WebAssembly has so far been a joint effort among Google, Microsoft, Mozilla, and a few other folks. I’m sorry the work was done via a private github account at first, but that was a temporary measure to help the several big companies reach consensus and buy into the long-term cooperative game that must be played to pull this off.

Here you can see JF Bastien of Google’s PNaCl team barely able to keep a lid on the secret. Good thing I replied with a comic book reference as plausible cover. Close one! 😀

Having both the PNaCl team and the V8 team from Google, along with key people from Microsoft and the asm.js and Emscripten gurus from Mozilla, collaborating closely once everyone saw the light, has been inspiring. I’d like to single out for highest praise JF Bastien, K. Gadd, and Ben Titzer of Google; Dan Gohman of Mozilla; Abhijith Chatra and Michael Holman of Microsoft; Alon Zakai of asm.js & Emscripten fame; Filip Pizlo for JavaScriptCore/WebKit; and especially asm.js/OdinMonkey mastermind Luke Wagner.
The Big Picture

In the history of computing, the dream of a universal, language-neutral intermediate form goes back to well before Melvin Conway‘s UNCOL (1958, the same year LISP was born). I remember ANDF from the ’80s, and U-something from the ’70s. No one wants the “N x M” language sources vs. machine targets problem.

Sometimes we must take a trip or two around Fortuna’s Wheel before falling into success. Neurons appear to have evolved more than once. Believe me, I find it ha-ha funny that lowly JS (which I did not plan out this far in advance!) has paved the evo-path to WebAssembly. Yet here we are.

Although it won’t be the only compiler framework used to generate wasm, LLVM has been a boon to this project, as to wasm’s Emscripten and PNaCl progenitors. Kudos to Chris Lattner and team.

The PNaCl folks I know are good natured, but I think some are sore at me for playing Cassandra to their Troy over the years on HN. So I want to give them major credit for wringing much undefined behavior (UB) out of LLVM — really out of all levels of abstraction, from C/C++ specs down to hardware. That kind of thankless work is a big help for WebAssembly, which must be mostly-determinstic and well-defined, for interoperation and security.

(Astute readers will have by this point recalled The Birth & Death of JavaScript by Gary Bernhardt. I live to troll Gary. 😉

Bottom line: with co-evolution of JS and wasm, in a few years I believe all the top browsers will sport JS engines that have become truly polyglot virtual machines. I predict that JS over the same timespan will endure and evolve to absorb more APIs and hardware-based affordances — but not all, where wasm carries the weight.

Again we see how the Web favors a succession of “little bangs”:

    to hold community consensus along the evolutionary path, by
    testing each hop for fitness with developers and implementors, and
    supporting usable polyfills for older deployed browsers. 

I usually finish with a joke: “Always bet on JS”. I look forward to working “and wasm” into that line — no joke.



Slides for the brief talk that I gave at a Harvard seminar on privacy and user data organized by John Taysom last week.

My talk was really more about the “network problem” than the “protocol problem”. Networks breed first- and second-mover winners and others path-dependent powers, until the next disruption. Users or rather their data get captured.

Privacy is only one concern among several, including how to realize economic value for many-yet-individually-weak users, not just for data-store/service owners or third parties. Can we do better with client-side and private-cloud tiers, zero-knowledge proofs and protocols, or other ideas?

In the end, I asked these four questions:

    Can a browser/OS “unionize its users” to gain bargaining power vs. net super-powers?
    To create a data commons with “API to me” and aggregated/clustered economics?
    Open the walled gardens to put users first?
    Still be usable and private-enough for most? 

I think the answer is yes, but I’m not sure who will do this work. It is vitally important.

I may get to it, but not working at Mozilla. I’ve resigned as CEO and I’m leaving Mozilla to take a rest, take some trips with my family, look at problems from other angles, and see if the “network problem” has a solution that doesn’t require scaling up to hundreds of millions of users and winning their trust while somehow covering costs. That’s a rare, hard thing, which I’m proud to have done with Firefox at Mozilla.

I encourage all Mozillians to keep going. Firefox OS is even more daunting, and more important. Thanks indeed to all who have supported me, and to all my colleagues over the years, at Mozilla, in standards bodies, and at conferences around the world. I will be less visible online, but still around.

/be



I am deeply honored and humbled by the CEO role. I’m also grateful for the messages of support. At the same time, I know there are concerns about my commitment to fostering equality and welcome for LGBT individuals at Mozilla. I hope to lay those concerns to rest, first by making a set of commitments to you. More important, I want to lay them to rest by actions and results.

A number of Mozillians, including LGBT individuals and allies, have stepped forward to offer guidance and assistance in this. I cannot thank you enough, and I ask for your ongoing help to make Mozilla a place of equality and welcome for all. Here are my commitments, and here’s what you can expect:

    Active commitment to equality in everything we do, from employment to events to community-building.
    Working with LGBT communities and allies, to listen and learn what does and doesn’t make Mozilla supportive and welcoming.
    My ongoing commitment to our Community Participation Guidelines, our inclusive health benefits, our anti-discrimination policies, and the spirit that underlies all of these.
    My personal commitment to work on new initiatives to reach out to those who feel excluded or who have been marginalized in ways that makes their contributing to Mozilla and to open source difficult. More on this last item below. 

I know some will be skeptical about this, and that words alone will not change anything. I can only ask for your support to have the time to “show, not tell”; and in the meantime express my sorrow at having caused pain.

Mozilla is a movement composed of different people around the world, working productively together on a common mission. This is important to our ability to work and grow around the world.

Many Mozillians and others know me as a colleague or a friend. They know that I take people as they come and work with anyone willing to contribute. At the same time, I don’t ask for trust free of context, or without a solid structure to support accountability. No leader or person who has a privileged position should. I want to be held accountable for what I do as CEO. I fully expect you all to do so.

I am committed to ensuring that Mozilla is, and will remain, a place that includes and supports everyone, regardless of sexual orientation, gender identity, age, race, ethnicity, economic status, or religion.

You will see exemplary behavior from me toward everyone in our community, no matter who they are; and the same toward all those whom we hope will join, and for those who use our products. Mozilla’s inclusive health benefits policies will not regress in any way. And I will not tolerate behavior among community members that violates our Community Participation Guidelines or (for employees) our inclusive and non-discriminatory employment policies.

You’ll also see more from Mozilla under my leadership in the way of efforts to include potential contributors, especially those who lack privilege. This entails several projects, starting with Project Ascend, which is being developed by Lukas Blakk. I intend to demonstrate with meaningful action my commitment to a Mozilla that lives up to its ideals, including that of being an open and inclusive community.

/be

A quick note to update everyone on Mozilla news. Our Board of Directors has appointed me CEO of Mozilla, with immediate effect. I’m honored and humbled, and I promise to do everything I can to lead Mozilla to new heights in this role.

I would first like to thank Jay Sullivan for his contributions to Mozilla and to the Web. He has been a passionate force at Mozilla whose leadership, especially during the last year, has been important to our success, in particular with Firefox OS. Jay is helping with the CEO transition and will then leave to pursue new opportunities.

My co-founder and 15-year partner in Mozilla, Mitchell Baker, remains active as Executive Chairwoman of Mozilla. I could not do what I do for Mozilla without Mitchell, and I like to think she feels the same way about me ;-). We have worked together well since she took on management of the tiny mozilla.org staff fragment embedded in Netscape. At that time I was “acting manager” (more like method acting manager :-P). I’ve learned a lot from Mitchell and my other peers at Mozilla about management since then!

Mozilla is about people-power on the Web and Internet — putting individual users, who create as well as consume, above all other agendas. In this light, people-fu trumps my first love, which you might say is math-fu, code-fu or tech-fu (if I may appropriate the second syllable from kung fu). People around the world are our ultimate cause at Mozilla, as well as source of inspiration and ongoing help doing what we do.

Speaking of people a bit more, I’ll take this moment to introduce Li Gong as my incoming COO. Li set up Mozilla China and our Taipei office, and he has been a crucial partner in building up Firefox OS. If you don’t know him yet, you will probably get a chance if you pass through our headquarters, as Li will be moving back to the US to help manage here.

Mozilla remains a global public benefit organization, so I’m sure I will see all of you more as I travel: to all of our offices (I have not yet been to Beijing or Taipei), to the places where we are bringing Firefox OS and the $25 smartphone, and everywhere Mozillians, developers, and others are working to make the Web better for everyone.

The World Wide Web is 25 years old today.

The Web is a big deal (as is the Internet on which it is built), I don’t need to tell you! But I did have a few thoughts, solicited by a friend who asked “where [do] you think the future of the Internet will take us in the next 25 years?”

My answer: 25 years is a long time. I expect some big changes (computers inside us monitoring body functions), while other things stay remarkably unchanged (no flying cars).

Even now people remark on how much more personal or intimate a smartphone is than a PC (that image still makes me laugh). Think about this when the Internet includes not just your house and most physical artifacts worth hooking up, but yourself.

In such a world, open systems built on open standards and open source are even more important, for all of these reasons:

    interoperation among implementations;
    freedom to migrate among different vendors’ systems;
    ability to mix-and-match, hyperlink/transclude, copy-learn-and-hack, and monitor/audit against mistakes, malware, and surveillance. 

We have more work to do. Let’s go.

/be

Other voices:

It is becoming increasingly difficult to trust the privacy properties of software and services we rely on to use the Internet. Governments, companies, groups and individuals may be surveilling us without our knowledge. This is particularly troubling when such surveillance is done by governments under statutes that provide limited court oversight and almost no room for public scrutiny.

As a result of laws in the US and elsewhere, prudent users must interact with Internet services knowing that despite how much any cloud-service company wants to protect privacy, at the end of the day most big companies must comply with the law. The government can legally access user data in ways that might violate the privacy expectations of law-abiding users. Worse, the government may force service operators to enable surveillance (something that seems to have happened in the Lavabit case).

Worst of all, the government can do all of this without users ever finding out about it, due to gag orders.
Implications for Browsers

This creates a significant predicament for privacy and security on the Open Web. Every major browser today is distributed by an organization within reach of surveillance laws. As the Lavabit case suggests, the government may request that browser vendors secretly inject surveillance code into the browsers they distribute to users. We have no information that any browser vendor has ever received such a directive. However, if that were to happen, the public would likely not find out due to gag orders.

The unfortunate consequence is that software vendors — including browser vendors — must not be blindly trusted. Not because such vendors don’t want to protect user privacy. Rather, because a law might force vendors to secretly violate their own principles and do things they don’t want to do.
Why Mozilla is different

Mozilla has one critical advantage over all other browser vendors. Our products are truly open source. Internet Explorer is fully closed-source, and while the rendering engines WebKit and Blink (chromium) are open-source, the Safari and Chrome browsers that use them are not fully open-source. Both contain significant fractions of closed-source code.

Mozilla Firefox in contrast is 100% open source [1]. As Anthony Jones from our New Zealand office pointed out the other month, security researchers can use this fact to verify the executable bits contained in the browsers Mozilla is distributing, by building Firefox from source and comparing the built bits with our official distribution.

This will be the most effective on platforms where we already use open-source compilers to produce the executable, to avoid compiler-level attacks as shown in 1984 by Ken Thompson.
Call to Action

To ensure that no one can inject undetected surveillance code into Firefox, security researchers and organizations should:

    regularly audit Mozilla source and verified builds by all effective means;
    establish automated systems to verify official Mozilla builds from source; and
    raise an alert if the verified bits differ from official bits. 

In the best case, we will establish such a verification system at a global scale, with participants from many different geographic regions and political and strategic interests and affiliations.

Security is never “done” — it is a process, not a final rest-state. No silver bullets. All methods have limits. However, open-source auditability cleanly beats the lack of ability to audit source vs. binary.

Through international collaboration of independent entities we can give users the confidence that Firefox cannot be subverted without the world noticing, and offer a browser that verifiably meets users’ privacy expectations.

See bug 885777 to track our work on verifiable builds.
End-to-End Trust

Beyond this first step, can we use such audited browsers as trust anchors, to authenticate fully-audited open-source Internet services? This seems possible in theory. No one has built such a system to our knowledge, but we welcome precedent citations and experience reports, and encourage researchers to collaborate with us.

Brendan Eich, CTO and SVP Engineering, Mozilla
Andreas Gal, VP Mobile and R&D, Mozilla

[1] Firefox on Linux is the best case, because the C/C++ compiler, runtime libraries, and OS kernel are all free and open source software. Note that even on Linux, certain hardware-vendor-supplied system software, e.g., OpenGL drivers, may be closed source.

