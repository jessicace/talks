* Common
  - introduce the window.navigator object
  - Device APIs Working Group:
    - specifications that provide access to user device information
  - Karen McGrane
    - If they can do it on their phone, they will do it on their
      phone. 
  - nngroup.com/articles/mobile-native-apps
    - Discoverability. Web apps win the prize on
      discoverability. Content is a lot more discoverable on the web
      than in an app: When people have a question or an information
      need, they go to a search engine, type in their query, and
      choose a page from the search results. They do not go to the app
      store, search for an app, download it, and then try to find
      their answer within the app. Although there are app aficionados
      who may fish for apps in app stores, most users don’t like
      installing and maintaining apps (and also wasting space on their
      device), and will install an app only if they expect to use it
      often.
    - Installation. Installing a native or hybrid app is a hassle for
      users: They need to be really motivated to justify the
      interaction cost. “Installing” a web app involves creating a
      bookmark on the home screen; this process, while arguably
      simpler than downloading a new app from an app store, is less
      familiar to users, as people don’t use bookmarks that much on
      mobile.
    - Maintenance. Maintaining a native app can be complicated not
      only for users, but also for developers (especially if they have
      to deal with multiple versions of the same information on
      different platforms): Changes have to be packaged in a new
      version and placed in the app store. On the other hand,
      maintaining a web app or a hybrid app is as simple as
      maintaining a web page, and it can be done as often or as
      frequently as needed. 
    - Platform independence. While different browsers may support
      different versions of HTML5, if platform independence is
      important, you definitely have a better chance of achieving it
      with web apps and hybrid apps than with native apps. As
      discussed before, at least parts of the code can be reused when
      creating hybrid or web apps.
    - Development cost. It’s arguably cheaper to develop hybrid and
      web apps, as these require skills that build up on previous
      experience with the web. NN/g clients often find that going
      fully native is a lot more expensive, as it requires more
      specialized talent. But, on the other hand, HTML5 is fairly new,
      and good knowledge of it, as well as a good understanding of
      developing for the mobile web and hybrid apps are also fairly
      advanced skills.
  - environmental design?
* Ambient Light Sensor
** Main
*** Support
    - Limited
    -
** [[https://www.w3.org/TR/ambient-light/][Ambient Light Sensor]]
   - W3C Working Draft 29 March 2016
   - extends generic sensor API
   - provides information about light levels detected by device's main
     light detector in lux units
   - light-level media feature in media queries 4 provides less
     granular information
   - quite different to the 2015 09 03 spec! Last year, you listen to
     the window's devicelight event.
   - based on the Generic Sensor API now
   - code
     #+BEGIN_SRC js
     let sensor = new AmbientLightSensor();
sensor.start();
    
sensor.onchange = function(event) {
    console.log(event.reading.illuminance);
};

sensor.onerror = function(event) {
    console.log(event.error.name, event.error.message);
};
     #+END_SRC
     #+BEGIN_SRC js
     [Constructor(optional SensorOptions sensorOptions)]
interface AmbientLightSensor : Sensor {
  readonly attribute AmbientLightSensorReading? reading;
};
     #+END_SRC
     #+BEGIN_SRC js
     [Constructor(AmbientLightSensorReadingInit ambientLightSensorReadingInit)]
interface AmbientLightSensorReading : SensorReading {
    readonly attribute unrestricted double illuminance;
};
  
dictionary AmbientLightSensorReadingInit {
  unrestricted double illuminance;
};
     #+END_SRC
 
   - no security considerations
   - current light level or illuminance: represents ambient light
     levels around the hosting device
   - precise lux value reported by different devices in the same light
     can be different due to differences in detection method, sensor
     construction, etc
   - illuminance attribute
     - represents current light level
** [[https://www.w3.org/2016/05/12-dap-minutes.html][Device and Sensors Working Group Teleconference -- 12 May 2016]]
   - Technical Architecture group would like to expose sensors in
     workers.
   - Small spec
   - Device Orientation spec is built on gyroscope, magnometer, and
     accelerometer. The way these are combined can vary a lot. Device
     Orientation only provides a high level view, whilst the
     underneath platforms have the lower level sensors. Firstly, work
     on exposing the lower level sensors.
     

** [[http://blog.teamtreehouse.com/exploring-javascript-device-apis]]
   - Access the light sensor on the device
   - Night mode - easier to use in dark surroundings
     #+BEGIN_SRC js
       window.addEventListener('devicelight', function(event) {
           // Get the ambient light level in lux.
           var lightLevel = event.value;
       });
     #+END_SRC
** [[http://www.webondevices.com/9-javascript-apis-accessing-device-sensors/][9 JavaScript APIs Accessing Device Sensors]]
   - uses light level sensor
   - returns readings in lux units
   - supported in Firefox
   - CSS4 light-level media query :O
   - code
     #+BEGIN_SRC js
       if('ondevicelight' in window) {
           window.addEventListener("devicelight", function(event) {
               //light level is returned in lux units
               console.log(event.value + " lux");
           });
       }

       if('onlightlevel' in window){
           window.addEventListener("lightlevel", function(event) {
               //light value can be dim, normal or bright
               console.log(event.value);
           });
       }
     #+END_SRC
** TODO [[http://www.webondevices.com/predict-hand-distance-with-device-light-javascript-api/][Predict Hand Distance with the device light JavaScript API]]
** HTML5 Device APIs
   - code
     #+BEGIN_SRC js
       window.addEventListener('devicelight', function(e) {
          alert(e.value); // returns double
       });
     #+END_SRC
   - values
     - < 400 lux (indoor)
     - 400 - 1000 (office lighting)
     - > 1000 (outdoor daylight)
** HTML5 Mobile hardware
   - code
     #+BEGIN_SRC js
     window.addEventListener('lightlevel', function(e) {
          alert(e.value); // returns string
       });
     #+END_SRC
   - lux ranges are left to implementation - hardware with different
     sensitivities may map differently
   - returned values:
     - dim - illuminance of < 50 lux
       - dark enough that light produced by a white background is eye
         straining or distracting
     - normal - illuminance of 50 - 10000 lux
       - office building hallway, dark overcast day, office lighting,
         sunrise or sunset on a clear day, overcast day
     - bright - illuminance of > 10000 lux
       - direct sunlight or similarly bright conditions that make it
         hard to see things that are not high contrast


** [[https://hacks.mozilla.org/2013/02/using-webapis-to-make-the-web-layer-more-capable/][Using WebAPIs to make the web layer more capable &#x2605; Mozilla Hacks – the...]]
   - serve different versions depending on the environment
   - code
     #+BEGIN_SRC js
window.addEventListener("devicelight", function (event) { 
    /* The level of the ambient light in lux 
       A lux value for "dim" typically begin below 50,
       and a value for "bright" begin above 10000
    */
    console.log(event.value); 
});
 
window.addEventListener("lightlevel", function (event) {
    // Possible values: "normal", "bright", "dim"
    console.log(event.value); 
});
     #+END_SRC
** [[http://alistapart.com/article/environmental-design-with-the-device-api][Environmental Design with the Device API · An A List Apart Article]]
   - returns lux units (lx) - an international measurement of light
     intensity
   - e.g. e-reader
   - adjust colour values, typography
* Battery Status API
** Tasks
*** TODO check how often events fire
*** TODO check battery vs getBattery support
** Talk Here: Battery Status API
*** Use Cases
    - display notification if amount of power is not up to the app's
      requirement, advise the user to manage their resources
      accordingly
    - e.g. estimated download time versus battery status?
    - can use to adjust app resource usage to reduce battery drain
    - save changes before the battery runs out in order to prevent data loss
    - enable auto saving
    - utility applications - collect statistics on battery usage
    - inform user if the device is charged enough to play a game, watch
      a movie
    - optimise battery consumption - e.g. email client checks server
      for new email less frequently if device is low on battery
    - word processor - save changes automatically before the battery
      runs out in order to prevent data loss
    - process on the client or process on the server
    - email applications reduce frequency for polling
    - reduce javascript processing client-side
    - offline storage of web application data
    - avoid network calls for images
*** navigator
***** getBattery()
      - provides information about the system's battery
      - returns a battery promise
      - battery promise resolved in a BatteryManager interface
      - 43 onwards
****** syntax
       #+BEGIN_SRC js
       navigator.getBattery().then(funcRef);
       #+END_SRC
       - where funcRef is a function to be called when the battery
         promise returned by navigator.getBattery gets resolved
       -
***** battery
      - used in older browsers
      - directly return the batteryManager object
*** BatteryManager
    - Interface
    - Provides ways to get information about battery charge level
    - returned from battery promise via navigator.getBattery
**** events
     - do not return event objects - access properties from
       BatteryManager interface
     - attach event listeners to the battery manager
***** chargingchange
      - battery charging state is updated
      - fired when charging attribute has changed
***** chargingtimechange
      - sent when battery charging time is updated
      - fired when chargingTime attribute changes
***** dischargingtimechange
      - when battery discharging time is updated
      - fired when the dischargingTime attribute has changed
***** levelchange
      - sent when battery level is updated
      - fired when level attribute has changed
**** attributes
***** charging
      - Read only
      - Boolean
      - Indicates whether or not the battery is charging
      - true if battery is charging, system's battery is not
        determinable, attached to the system, full, unable to report
      - false if battery is discharging
      - 
***** chargingTime
      - read only
      - number
      - Represents remaining time until battery is fully charged in seconds
      - Returns 0 if the battery is already fully charged
      - returns positive infinity if the battery is discharging or if
        implementation is unable to report the remaining charging time
***** dischargingTime
      - read only
      - Represents the remaining time until battery is fully discharged
        and system will suspend
      - Seconds
      - remaining time in seconds until system battery is completely discharged
      - returns positive infinity if the battery is charging, if
        unable to report the remaining discharging time, or if there
        is no battery attached to the system
***** level
      - represents system battery charge level
      - scaled to a value between 0.0 and 1.0
      - double (float)
      - returns 0 if battery is empty and system is about to suspend
      - returns 1.0 if battery is full, if implementation cannot
        report the battery's level, or if there is no battery attached
        to the system
      - multiply by 100 to get percentage
*** Support
**** https://github.com/pstadler/battery.js
     - Wrapper for the HTML5 Battery Status API
     - For obvious reasons, there is no polyfill.
**** Browsers
     - Edge: Under Consideration
     - Safari :(
**** Global
     - Australia: 47.86%
     - Global: 64.66%
*** Misc
    - similar uses to page visibility
*** Security
    - Can be used to identify your online presence - creating a
      digital fingerprint of your device.
    - W3C - information disclosed has minimal impact on privacy,
      exposed without permission grants
    - Information is very specific- receive both seconds and
      percentages 
    - These two figures, provides one of 14 million combinations-
      becomes a unique ID for each user. Battery updates almost every
      half a minute - identify a user within 30 seconds. You could be
      identified if using a website via a proxy, then revisiting the
      same website without a proxy. Link user's new and old
      identities - use respawning.
    - Can be disabled.
    - Provide users the choice.
    - Will it stay quite so granular?
    - ‘The leaking battery: A privacy analysis of the HTML5 Battery Status API’
** [[https://www.w3.org/TR/battery-status/][Battery Status API]]
   - proposed recommendation 29 March 2016
   - changes
     - more detailed privacy considerations e.g. advice regarding high
       precision readout implications
     - very little change to the spec since late 2014 12 09
     - 2014 changes from 08 May 2012
       - exposes BatteryManager via getBattery() which returns a
         Promise instead of synchronous accessor 
       - clarifies default values
       - specifies behaviour for multiple batteries
   - we develop sites assuming that the user has enough battery for
     the task at hand
     - videos?
     - form completions?
   - spec warns naive implementation can negative impact battery
   - defer or scale back work
     - email application does not check server as often
     - save changes in word processors
   - security
     - originally - "has minimal impact on privacy or fingerprinting,
       and therefore is exposed without permission grants."
     - user agent should not expose high precision readouts of battery
       status information that can be used as a fingerprinting vector
     - MAY ask user for battery status information access -
       alternatively, enforce user permission requirement in private
       browsing modes
     - should inform user of the API use by scripts in an uninstrusive
       manner, aiding transparency, allowing user to revoke API access
     - may obfuscate exposed value - authors cannot directly know if a
       hosting device has no battery, is charging, or is exposing fake
       values
*** navigator
    - Each browsing context has a battery promise.
    - The battery promise is set to null.
    - The Promise object holds a BatteryManager.
    - Call the getBattery():
      - if batteryPromise is not null, return the battery promise.
      - Otherwise, set battery promise to a new Promise
      - return battery promise, continue asynchronously
      - Create a new BatteryManager object - let battery be that
        object
      - Resolve the battery promise with battery (BatteryManager
        object)
    - code
      #+BEGIN_SRC js
      partial interface Navigator {
    Promise<BatteryManager> getBattery ();
};
      #+END_SRC
*** BatteryManger
    - represents current battery status information of hosting device
    - attributes
      - charging: charging state
      - chargingTime: represents time remaining in seconds until
        battery is fully charged
      - dischargingTime: represents time remaining in seconds until
        completely discharged
      - level: level of system's battery
    - default values, used when unable to report battery status
      information - cannot report values for any attributes, due to a
      system preference, limitation, or no battery
      - charging = true
      - chargingTime = 0
      - dischargingTime = positive infinity
      - level = 1.0
    - emulates a full battery, to reduce potential for fingerprinting
      and to prevent applications from degrading performance

    - events
      - chargingtimechange
      - dischargingtimechange
      - levelchange
      - left to implementations - check!

    - code
      #+BEGIN_SRC js
      interface BatteryManager : EventTarget {
    readonly        attribute boolean             charging;
    readonly        attribute unrestricted double chargingTime;
    readonly        attribute unrestricted double dischargingTime;
    readonly        attribute double              level;
                    attribute EventHandler        onchargingchange;
                    attribute EventHandler        onchargingtimechange;
                    attribute EventHandler        ondischargingtimechange;
                    attribute EventHandler        onlevelchange;
};
      #+END_SRC
**** Multiple Batteries
     - exposes a unified view of batteries
     - if one is charging, charging is set to true
     - chargingTime: set to maximum charging time of individual
       batteries if charging in parallel, and the sum of the
       individual charging times if charging serially
     - dischargingTime - set to maximum discharging time of individual
       batteries if discharging in parallel, and sum of individual
       discharging times if discharging serially
     - level - set to average of the levels of batteries of same
       capacity, or weighted average of battery level attributes for
       batteries of different capacities
**** Event handlers
     - chargingchange
     - chargingtimechange
     - dischargingtimechange
     - levelchange
**** Examples
     #+BEGIN_SRC js
     // We get the initial value when the promise resolves ...
navigator.getBattery().then(function(battery) {
  console.log(battery.level);
  // ... and any subsequent updates.
  battery.onlevelchange = function() {
    console.log(this.level);
  };
});
     #+END_SRC
     #+BEGIN_SRC js
     navigator.getBattery().then(function(battery) {
  console.log(battery.level);
  battery.addEventListener('levelchange', function() {
    console.log(this.level);
  });
});
     #+END_SRC
     #+BEGIN_SRC js
     window.onload = function () {
      function updateBatteryStatus(battery) {
        document.querySelector('#charging').textContent = battery.charging ? 'charging' : 'not charging';
        document.querySelector('#level').textContent = battery.level;
        document.querySelector('#dischargingTime').textContent = battery.dischargingTime / 60;
      }

      navigator.getBattery().then(function(battery) {
        // Update the battery status initially when the promise resolves ...
        updateBatteryStatus(battery);

        // .. and for any subsequent updates.
        battery.onchargingchange = function () {
          updateBatteryStatus(battery);
        };

        battery.onlevelchange = function () {
          updateBatteryStatus(battery);
        };

        battery.ondischargingtimechange = function () {
          updateBatteryStatus(battery);
        };
      });
    };
     #+END_SRC

** The State of Browser APIs - 1
*** [[http://hwclass.in/2016/03/09/the-next-generation-of-browser-apis/]]
    - 2016-03-09
*** Battery Status API
    - get charging information from the computer
    - get battery status of machine in the form of a double between 0 and 1
    - uses the navigator object via getBattery()
    - Firefox versions below 42 uses navigator.battery
      #+BEGIN_SRC js
        if (navigator.getBattery()) {  
            var battery = navigator.getBattery()
            console.log(battery.level * 100); //a double value our battery
        }
      #+END_SRC
    - Track charging level via levelchange
      #+BEGIN_SRC js
        navigator.getBattery().then(function(battery) {  
            battery.addEventListener('levelchange', function() {
                console.log('Battery Status : ' + this.level * 100 + ' %');
            });
        });
      #+END_SRC
    - Support:
      - Chrome 45
      - Firefox 43
      - Opera 34
      - IE No support
      - Safari No support
** How to Use the HTML5 Battery Status API
*** [[http://www.sitepoint.com/html5-battery-status-api/]]
    - 2013-12-19
*** Causes of Battery Drain
    - The screen:
      - switch to a light on dark theme
      - Disable non-critical CSS3 and JavaScript animations
      - Avoid DOM changes
    - Network activity:
      - Slow down / stop Ajax polling
      - Use AppCache or Service workers to make an offline application
      - Store data on the client using Web Storage
      - Avoid requests for non-critical assets e.g. images
    - Audible / tactile output
      - Sound / vibration drains battery.
      - Shorten effects, disable it
    - Processing
      - Action games
      - Avoid complex ongoing client-side calculations
*** Cross browser battery object
    - Early implementation (outdated)
    #+BEGIN_SRC js
      var battery = navigator.battery || navigator.webkitBattery || navigator.mozBattery || navigator.msBattery;

      if (battery) {
          // battery API supported
      }
    #+END_SRC
*** Properties
    - Charging or above certain level
      #+BEGIN_SRC js
        var enableEffects = (battery.charging || battery.level > 0.25);

        // vibrate for one second
        if (enableEffects) navigator.vibrate(1000);
      #+END_SRC
      - Progressive enhancement!
    - chargingTime: time in seconds until charging reaches 100%
    - dischargingTime: time in seconds until the battery is completely
      discharged
*** Battery Status Events
    - chargingchange: device has changed from charging to discharging
      or discharging to charging
    - levelchange: battery level has changed
    - chargingtimechange: change in time until battery is fully charged
    - dischargingtimechange: change in time until battery is fully discharged
    - We can make better decisions!
*** Example
    #+BEGIN_SRC js

      (function() {

          "use strict";

          // detect battery support
          var battery = navigator.battery || navigator.webkitBattery || navigator.mozBattery || navigator.msBattery || null;

          if (battery) {

              // meter element
              var meter = document.getElementsByTagName("meter")[0],
                  status = document.getElementById("status");

              // battery status change
              window.onload = battery.onlevelchange = battery.onchargingchange = function() {

                  meter.value = battery.level;
                  meter.textContent = Math.floor((battery.level*100)+"%");
                  var s;
                  if (battery.charging) {
                      s = "CHARGING: fully charged in " + battery.chargingTime;
                  }
                  else {
                      s = "DISCHARGING: time remaining " + battery.dischargingTime;
                  }
                  status.textContent = s + " seconds";

              };

              // enable battery meter
              document.getElementById("nosupport").style.display = "none";
              document.getElementsByTagName("article")[0].style.display = "block";

          }

      }());

    #+END_SRC
** Battery Status API
*** [[https://developer.mozilla.org/en-US/docs/Web/API/Battery_Status_API]]
*** About
    - provides information about the system's battery charge level
    - provides events
    - can use to adjust app resource usage to reduce battery drain
    - save changes before the battery runs out in order to prevent data loss
    - extends window.navigator
    - navigator.getBattery()
      - returns a battery promise
      - promise resolves in a BatteryManager object
*** events
    - chargingchange
    - levelchange
    - chargingtimechange
    - dischargingtimechange
*** Example
    #+BEGIN_SRC js
      navigator.getBattery().then(function(battery) {
          function updateAllBatteryInfo(){
              updateChargeInfo();
              updateLevelInfo();
              updateChargingInfo();
              updateDischargingInfo();
          }
          updateAllBatteryInfo();

          battery.addEventListener('chargingchange', function(){
              updateChargeInfo();
          });
          function updateChargeInfo(){
              console.log("Battery charging? "
                          + (battery.charging ? "Yes" : "No"));
          }

          battery.addEventListener('levelchange', function(){
              updateLevelInfo();
          });
          function updateLevelInfo(){
              console.log("Battery level: "
                          + battery.level * 100 + "%");
          }

          battery.addEventListener('chargingtimechange', function(){
              updateChargingInfo();
          });
          function updateChargingInfo(){
              console.log("Battery charging time: "
                          + battery.chargingTime + " seconds");
          }

          battery.addEventListener('dischargingtimechange', function(){
              updateDischargingInfo();
          });
          function updateDischargingInfo(){
              console.log("Battery discharging time: "
                          + battery.dischargingTime + " seconds");
          }

      });
    #+END_SRC
*** Support
    - Chrome 39
    - Chrome for Android - 42
      - BatteryManager.chargingTime, BatteryManager.dischargingTime
        always equal to infinity
    - Firefox
      - Navigator.getBattery supported in Firefox 43 onwards
      - Navigator.battery is deprecated but supported by Firefox
        - returns the batteryManager object directly
      - Linux requires UPower
    - Safari
      - No support
** Using the Battery Status API to Optimize Your Development
*** [[http://www.sitepoint.com/using-the-battery-status-api-to-optimize-your-development/]]
*** Introduction
    - Access information about the user's battery
    - In development since early 2011
*** Use
    - Specification is not finalised so should be used to progressively
      enhance your application. If you see navigator.battery, this is
      deprecated.
    - Customise Geolocation elements:
      - Have a lower accuracy
      - Don't request usage of inbuilt GPS
      - Provide option between lower battery usage or higher accuracy
    - Set video streams or playback to lower quality by default
      - Data transfers quicker, less intensive on the device
      - Option to download high quality stream
    - CSS Animations
      - Reduce complex CSS animations
      - Provide a more basic interface
    - Determine interval for background tasks
      - E.g. Ajax, Web Workers
      - Use state to determine how frequently tasks should be called
      - Minimise network usage
    - Idea should be to provide reasonable defaults, then enhance
      applications when we know. Or provide warnings, etc
*** Browser Support
    - Mobile
      - Firefox mobile has supported for over 3 years! 18+ January 2013
      - Opera 25+ October 2014
      - Chrome 40+ April 2015
    - Desktops
      - Firefox 18+ 2012
      - Chrome 39 October 2014
      - Opera 25 October 2014
*** Practical Example: Reducing Background API Calls
    - Set default intervals for data and processor-intensive tasks
    - Websites request information dynamically - using Ajax to push /
      pull data
    - Often started by default in the background. Choose default
      experience for the user
    - set conservative default settings
** HTML5 Battery API
*** [[http://jaspreetchahal.org/html5-battery-api/]]
*** Use
    - slow down re-polling of server
    - alert user when accessing / loading images
*** Old syntax
    - navigator.battery || navigator.webkitBattery || navigator.mozBattery
    -
*** Events
    #+BEGIN_SRC js
      // adds a "charging time change" event listener
      batteryObj.addEventListener("chargingtimechange", function() {
        console.warn("Event: Battery charge time change, Value: ", batteryObj.chargingTime);
      }, false);
      // adds a "discharging time change" event listener
      batteryObj.addEventListener("dischargingtimechange", function() {
        console.warn("Event: Battery discharging time change, value: ", batteryObj.dischargingTime);
      }, false);
      // adds a levelchange event listener
      batteryObj.addEventListener("levelchange", function() {
        console.warn("Event: Battery level change, Value: ", batteryObj.level);
      }, false);
      // adds a chargingchange event listener
      batteryObj.addEventListener("chargingchange", function() {
        console.warn("Event: Battery charge change, Value: ", batteryObj.charging);
      }, false);

    #+END_SRC
** HTML5 Battery Status API
*** [[https://steveedson.co.uk/html5/battery-api/]]
*** Uses
    - stop or reduce Ajax requests
    - OLED screen - switch to a dark themed stylesheet and reduce the
      power consumption on the device
    - prompt the user to save an article to read later, with a service
      such as instapaper or pocket
    - save data that the user is working on before it is lost

*** Use
    - spec has not been finalised
    - fetch data asynchronously
    - use Promise: first parameter for success, second parameter for failure
    - charging:
      - if infinity, is because not enough data or device never charges
        / discharges
      - on mobiles, often not available - so set to infinity always

    #+BEGIN_SRC js
      navigator.getBattery().then(batterySuccess, batteryFailure);

    #+END_SRC
    #+BEGIN_SRC js
      var battery;

      /**
       ,* Successful callback providing a Battery Manager object.
       ,* @param batteryManager
       ,*/
      function batterySuccess(batteryManager) {
          battery = batteryManager;

          updatedBatteryStats();
      }

      /**
       ,* Failure callback.
       ,*/
      function batteryFailure() {
          // Fail gracefully.
      }


    #+END_SRC

*** Event handling
    #+BEGIN_SRC js
      // Register event handlers
      battery.addEventListener('chargingchange', updatedBatteryStats);
      battery.addEventListener('chargingtimechange', updatedBatteryStats);
      battery.addEventListener('dischargingtimechange', updatedBatteryStats);
      battery.addEventListener('levelchange', updatedBatteryStats);

    #+END_SRC

*** Full use
    #+BEGIN_SRC js
      // Initialise Variables
      var battery;

      // Define functions

      /**
       ,* Successful callback providing a Battery Manager object.
       ,* @param batteryManager
       ,*/
      function batterySuccess(batteryManager) {
          // Assign batteryManager to globally 
          //   available `battery` variable.
          battery = batteryManager;

          // Register event handlers  
          battery.addEventListener('chargingchange', updatedBatteryStats);
          battery.addEventListener('chargingtimechange', updatedBatteryStats);
          battery.addEventListener('dischargingtimechange', updatedBatteryStats);
          battery.addEventListener('levelchange', updatedBatteryStats);

          // Process updated data
          updatedBatteryStats();
      }

      /**
       ,* Failure callback.
       ,*/
      function batteryFailure() {
          // Fail gracefully. 
      }

      /**
       ,* Update HTML with current battery stats
       ,*/
      function updatedBatteryStats() {
          // Example data in window.battery:
          //   BatteryManager
          //     charging: false
          //     chargingTime: Infinity
          //     dischargingTime: 12600
          //     level: 0.56
          //     onchargingchange: null
          //     onchargingtimechange: null
          //     ondischargingtimechange: null
          //     onlevelchange: null
      }

      if("getBattery" in navigator) {
          // API is supported

          // Request battery manager object.
          navigator.getBattery().then(batterySuccess, batteryFailure);

      } else {
          // API is not supported, fail gracefully.
      }

    #+END_SRC
** JavaScript Battery API
*** [[https://davidwalsh.name/javascript-battery-api]]
*** Functionality
    - callback provided to then is given a BatteryManager object
      #+BEGIN_SRC js
      navigator.getBattery().then(function(result) {});
      #+END_SRC
    - BatteryManager object
      #+BEGIN_SRC js
        BatteryManagery {
            charging: false,
            chargingTime: Infinity,
            dischargingTime: 8940,
            level: 0.59,
            onchargingchange: null,
            onchargingtimechange: null,
            ondischargingtimechange: null,
            onlevelchange: null
        }    
      #+END_SRC
*** Issues
    - Old API had issues with Mac device batteries.
    - Promise based now. Old used synchronous.
** HTML5 Battery Status API
*** [[http://code.tutsplus.com/tutorials/html5-battery-status-api--mobile-22795]]
*** About
    - W3C Candidate Recommendation - but has not changed much
      since 2012. Current API most likely won't change.
    -
*** Examples
    - temporarily pause long-running processes
    - proactive action - if application manages content, then it may be
      useful to save the user's data more frequently
    - switch to a light on dark theme - screen draws less power from
      the battery
    -
** 10 HTML5 APIs Worth Looking Into
*** [[http://www.sitepoint.com/10-html5-apis-worth-looking/]]
*** Battery Status
** [[http://www.webondevices.com/9-javascript-apis-accessing-device-sensors/][9 JavaScript APIs Accessing Device Sensors]]
   - prevent complex animations or calculations
   - both mobile and laptop
   - me: don't download double density images?
   - code
     #+BEGIN_SRC js
       var battery = navigator.battery || navigator.webkitBattery || navigator.mozBattery;

       function logBattery(battery) {
           console.log(battery.level);
           console.log(battery.charging);
           console.log(dischargingTime);

           battery.addEventListener('chargingchange', function() {
               console.log('Battery chargingchange event: ' + battery.charging);
           }, false);
       }

       if (navigator.getBattery) {
           navigator.getBattery().then(logBattery);
       } else if (battery) {
           logBattery(battery);
       }
     #+END_SRC
** [[https://hacks.mozilla.org/2013/02/using-webapis-to-make-the-web-layer-more-capable/][Using WebAPIs to make the web layer more capable &#x2605; Mozilla Hacks – the...]]
   - code
     #+BEGIN_SRC js
       var battery = navigator.battery; 
       if (battery) { 
           var batteryLevel = Math.round(battery.level * 100) + "%", 
               charging = (battery.charging)? "" : "not ", 
               chargingTime = parseInt(battery.chargingTime / 60, 10), 
               dischargingTime = parseInt(battery.dischargingTime / 60, 10);
 
               // Set events 
               battery.addEventListener("levelchange", showStatus);
               battery.addEventListener("chargingchange", showStatus);
               battery.addEventListener("chargingtimechange", showStatus);
               battery.addEventListener("dischargingtimechange", showStatus);
        }
     #+END_SRC
** [[http://alistapart.com/article/environmental-design-with-the-device-api][Environmental Design with the Device API · An A List Apart Article]]
   - should not assume that small screen should get small images
   - battery api provides not just a snapshot, but also events
** TODO [[https://www.theguardian.com/technology/2015/aug/03/privacy-smartphones-battery-life][How your smartphone's battery life can be used to invade your privacy | Techn...]]
* getUserMedia
** [[http://www.sitepoint.com/10-html5-apis-worth-looking/]]
*** getUserMedia API
    - access to multimedia stream from local devices
    - real time communication, tutorials, lesson recording
    - accepts parameters as an object of constraints, a success
      callback, and a failure callback
    - can control the requested stream - high resolution or low
    - desktop browser support is Chrome 21+, Firefox 17+, Opera
      18+. Mobile support Chrome 32+, Firefox 26+, Opera 12+.
* Device Orientation API
** Main
*** Support
    - Support
      - IE11
      - Supported in Edge fully!
      - Partial support - lack of compassneedscalibration event support.
      - Not supported in Safari.
      - Supported in iOS Safari.
      - Global: 85.44%
      - Australia: 88.73%
    - DeviceOrientationEvent.beta
      - -90 and 90 values on mobile Safari
      - 180 and -180 on Firefox
    - DeviceOrientationAlpha
      - Safari does not implement the spec correctly. Alpha is
        arbitrary, instead of relative to true north.
      - Safari offers webkitCompassing, which has the opposite sign to
        alpha, and is relative to magnetic north instead of true
        north.
    - IE Mobile has no support
** EdX
*** Introduction
    - use dev tools to fake the orientation values, using mobile
      device emulation mode.
*** The coordinate system and Euler angles
    - Transformation from the Earth coordinate frame to the device
      coordinate frame uses the following rotations.
    - Rotations use the right-hand convention. Positive rotation
      around an axis is clockwise when viewed along the positive
      direction of the axis.
**** alpha
     - Alpha in 0 - 360
     - Rotation around the Z axis
     - Device in the initial position
     - Device rotated through angle alpha about z axis
**** beta
     - Beta in -180 - 180
     - Rotation around the x axis
**** gamma
     - Gamma in -90 - 90
     - Rotation around the y axis
*** Get different angles using the JavaScript HTML5 orientation API
**** Typical Use
     - Use:
       - Test if your browser supports the orientation
       - Define a listener for the deviceorientation event
       - Get the angles from the event
     -
**** Interesting Uses
     - Mix orientation API and websockets
     - Control the movement of the logo shown!
     - Cool use case :D
** [[http://blog.teamtreehouse.com/exploring-javascript-device-apis]]
   #+BEGIN_SRC js
     // Check to make sure the browser supprots DeviceOrientationEvents
     if (window.DeviceOrientationEvent) {
         // Create an event listener
         window.addEventListener('deviceorientation', function(event) {
             // Get the left-to-right tilt (in degrees).
             var tiltLR = event.gamma;

             // Get the front-to-back tilt (in degrees).
             var titleFB = event.beta;

             // Get the direction of the device (in degrees).
             var direction = event.alpha;
         });
     }
   #+END_SRC
** [[http://www.webondevices.com/9-javascript-apis-accessing-device-sensors/][9 JavaScript APIs Accessing Device Sensors]]
   - get rotation angles in three dimensions
   - IE for Windows Phone supported from Version 11
   #+BEGIN_SRC js
     if (window.DeviceOrientationEvent) {
         window.addEventListener('deviceorientation', function(eventData) {
             // gamma is the left-to-right tilt in degrees
             console.log(eventData.gamma);

             // beta is the front-to-back tilt in degrees
             console.log(eventData.beta);

             // alpha is the compass direction the device is facing in degrees
             console.log(eventData.alpha);
         }, false);
     }
   
   #+END_SRC
** [[http://www.girliemac.com/presentation-slides/html5-mobile-2014/device.html#6][HTML5 Device APIs]]
   - The device orientation event is fired when new data is available
     from a magnetometer sensor. Device orientation supplies the
     physical orientation of the device.
   - code
     #+BEGIN_SRC js
     if (window.DeviceOrientationEvent) {
         window.addEventListener('deviceorientation', function(e) {
           compass   = e.alpha; // degree
               frontBack = e.beta;
               leftRight = e.gamma;
               // ...
         }, false);
       }
     #+END_SRC
** HTML5 Mobile Hardware
   - gyroscope
   - accelerometer
   - compass
   - events
     - deviceorientation
     - devicemotion
     - compassneedscalibration
   - code
     #+BEGIN_SRC js
     if (window.DeviceOrientationEvent) {
         window.addEventListener('deviceorientation', function(e) {
           a = Math.floor(e.alpha);
               b = Math.floor(e.beta);
               g = Math.floor(e.gamma);
               el.style.transform = 'rotateZ('+a+'deg) 
                                  rotateX('+b+'deg) rotateY('+g+'deg)';
         }, true);
       } 
                
     #+END_SRC
   - not raw sensor data
   - high level data agnostic to the source of information - common
     sources are gyroscope, accelerometer, compass
   - deviceorientation fired when new information is fired from the
     magnometer sensor, supplies physical orientation of the device
   - devicemotion supplies acceleration of device
   -
** HTML5 Mobile Approach
   - deviceorientation: expressed as a series of rotations from a
     local coordinate frame
   - devicemotion: expressed in Cartesian coordinates in a coordinate
     frame defined in the device
   - compassneedscalibration
     - inform websites that a compass being used to provide data for
       one of these events needs calibration
     - webkitCompassHeading property in iOS5
* Device Motion API
** EdX
*** Introduction
    - Deals with accelerations
    - Uses
      - Controlling a game
        - Monitor device orientation and interpret tilting in a
          certain direction as a means to control and on-screen sprite
      - Gesture recognition
        - Monitor device acceleration and apply signal processing to
          recognise specific gestures - e.g. a shaking gesture to
          clear a web form
      - Mapping
        - Use orientation to correctly align the map with reality
    -
*** Basic Usage
    - Returns more than just rotation information.
    - Returns acceleration information about device current motion.
    - Acceleration along the X axis, Y axis, and Z axis.
    - Measured in meters per second squared.
    - Accleration returned as an acceleration event.
    - Two properties:
      - accelerationIncludingGravity
      - acceleration
        - excludes the effects of gravity.
    - There are two properties, as some devices are able to exclude
      the effect of gravity if equipped with a gyroscope.
    - There is acceleration due implicitly to gravity.
    - If the device does not have a gyroscope, the acceleration
      property will be null.
    - All iOS devices have a gyroscope.
*** About Acceleration
    - Device motion is a superset of the device orientation event.
    - It returns data about the rotation information.
    - Includes acceleration information about the device.
    - The acceleration data is returned in three axes: x, y, z.
    - Measured in m/s^2.
    - Some devices do not have the hardware to exclude the effect of
      gravity.
*** Common Steps
    - Principles
      - Test if API is supported
      - Add listener for devicemotion events
      - Get acceleration values from the DOM event
*** Common processing with acceleration values
    - Test value of the acceleration.z property:
      - If > 0, device is facing up
      - Otherwise, facing down
        #+BEGIN_SRC js
          // For example, if acceleration.z is > 0 then the phone is facing up
          var facingUp = -1;
          if (acceleration.z > 0) {
              facingUp = +1;
          }
        #+END_SRC
    - Compute the angle corresponding to the Left / Right and Front
      / Back tilts.
      #+BEGIN_SRC js
       
        function deviceMotionHandler(eventData) {
            // Grab the acceleration including gravity from the results
            var acceleration = eventData.accelerationIncludingGravity;
            // Convert the value from acceleration to degrees
            // acceleration.x|y is the acceleration according
            //  to gravity, we'll assume we're on  Earth and divide
            // by 9.81 (earth gravity) to get a percentage value, 
            // and then multiply that by 90 to convert to degrees.
            var tiltLR = Math.round(((acceleration.x) / 9.81) * -90);
            var tiltFB = Math.round(((acceleration.y + 9.81) / 9.81) * 90 * facingUp);
            // ... do something
        }

      #+END_SRC
    - Compute the vertical (direction of the sky)
      #+BEGIN_SRC js
        var angle = Math.atan2(accel.y,accel.x);
        var canvas = document.getElementById('myCanvas');
        var ctx = canvas.getContext('2d');
 
        ctx.moveTo(50,50);
        // Draw sky direction in the canvas
        ctx.lineTo(50-50*Math.cos(angle),50+50*Math.sin(angle));
        ctx.stroke();
      #+END_SRC
    - Use acceleration values to move on screen
      #+BEGIN_SRC js
        ball.x += acceleration.x;
        ball.y += acceleration.y;
      #+END_SRC
    -
*** Example
    - X and Y acceleration values can be used for indicating the
      sky's direction (vertical)
    - Z acceleration is an indicator for the face up / face down
      orientation of the device
** [[http://www.webondevices.com/9-javascript-apis-accessing-device-sensors/][9 JavaScript APIs Accessing Device Sensors]]
   - uses accelerometer for device movement
   - detects acceleration, not speed
   - support iOS, Android
   - IE for Windows Phone supported from Version 11
*** code
    #+BEGIN_SRC js
      if (window.DeviceMotionEvent) {
          window.addEventListener('devicemotion', function(eventData) {   
              // Acceleration
              console.log(eventData.acceleration.x);
              console.log(eventData.acceleration.y);
              console.log(eventData.acceleration.z);
    
              // Acceleration including gravity
              console.log(eventData.accelerationIncludingGravity.x);
              console.log(eventData.accelerationIncludingGravity.y);
              console.log(eventData.accelerationIncludingGravity.z);

              // Rotation rate
              console.log(eventData.rotationRate.alpha);
              console.log(eventData.rotationRate.beta);
              console.log(eventData.rotationRate.gamma);
          }, false);
      }
    #+END_SRC
** [[http://www.girliemac.com/presentation-slides/html5-mobile-2014/device.html#6][HTML5 Device APIs]]
   - Device motion supplies the acceleration of the
     device. Compassneedscalibration iOS5 has webkitCompassingHeading
     property, but is not a standard
* Generic Sensor API
** [[https://w3c.github.io/sensors/][Generic Sensor API]]
   - Hot off the press! Editor's draft, 11 May 2016.
   - framework for exposing sensor data
   - provides an abstract Sensor interface to be extended to
     accommodate different sensor types
   - work in progress!
*** Introduction
    - used for geolocation, counting steps, head tracking
    - especially true for mobile devices
    - promotes consistency
    - at this stage, no sensor discovery API - perhaps in the future
      when there are enough sensors to warrant it.
    - api interacts with the device's default sensor.
*** Background
    - geolocation
    #+BEGIN_SRC js
    let sensor = new GeolocationSensor({ accuracy: "high" });

sensor.onchange = function(event) {
    var coords = [event.reading.latitude, event.reading.longitude];
    updateMap(null, coords, reading.data.accuracy);
};

sensor.onerror = function(error) {
    updateMap(error);
};
    #+END_SRC
    - tire example :)
      #+BEGIN_SRC js
      let sensor = new DirectTirePressureSensor({ position: "rear", side: "left" });
sensor.onchange = event => console.log(event.reading.pressure);
      #+END_SRC
    - best practice recommended by the spec
      - check for error thrown by Sensor
      - listen to errors emitted
      - handle gracefully 
    - code
      #+BEGIN_SRC js
      try { // No need to feature detect thanks to try..catch block.
    let sensor = new GeolocationSensor({});
    sensor.start();
    sensor.onerror = error => gracefullyDegrade(error);
    sensor.onchange = data => updatePosition(data.coords);
} catch(error) {
    gracefullyDegrade(error);
}
      #+END_SRC
*** Security
    - privacy risks arise when used with each other or over time -
      risk of fingerprinting
    - User agents may reduce the risk by limiting event rates
      available to web application developers
      - may also provide an indication of when the sensor is used
**** Browsing Context
     - sensor readings only available in top-level browsing context to
       avoid privacy risks
     - top level browsing context: not a nested browsing context, has
       no parent.. need to clarify this
     - e.g. mobile device only fires event on active tab, and not on
       the background tabs, or within iframes.
**** Secure Context
     - must only be available within a secure context (as with
       geolocation Chrome 50)
**** Obtaining Explicit User Permission
     - obtained through the Permissions API
*** Concepts
    - sensor: measures different physical quantities
      - provides raw sensor readings
      - source of information about the user and their environment
    - calibration
      - used to correct known, predictable discrepancies between raw
        sensor readings and the corresponding physical quantities
    - sensor fusion
      - known but unpredictable discrepancies are addressed
        dynamically through sensor fusion
    - sensor readings
      - calibrated raw sensor readings (regardless of sensor fusion)
    - sensor types
      - measure different physical quantities e.g. temperature, air
        pressure, heart-rate, luminosity
    - low-level sensor types
      - sensor types characterised by their implementation
      - e.g. gyroscope
    - high-level sensor types
      - sensors named after their readings
      - e.g. geolocation provides information about user's location,
        but precise means by which this data is obtained is
        purposefully opaque - could be GPS chip, network cell
        triangulation, wifi-networks, combination, etc)
      - depends on implementation-specific heuristics
      - generally the result of applying algorithms to low-level sensors
        - e.g. pedometer can be built using output of a gyroscope or
          of sensor fusion
    - distinction
      - barometer that measures air pressure is generally low-level
    - sensor readings from different sensor types combined through
      sensor fusion - provides higher-level, more accurate data, at
      the cost of increased latency
      - e.g. a three axis magnetometer must be combined with the
        readings of an accelerometer to provide a correct bearing
    - sensor fusion can also be carried out in software
      - e.g. raw output of a gyroscope needed for head tracking as
        latency must be minimal - sensor fusion in software in this
        case
    - reporting modes
      - periodic
        - sensor readings reported at regular intervals
        - at an adjustable (typo) frequency measured in hertz (Hz)
        - much more fine-grained approach
        - essential for use cases with low latency requirements
      - auto reporting mode
        - only reported upon measurable change
        - gives the user agent more latitude to carry out power or CPU
          saving strategies, and should be favoured
        -
*** Model
**** Sensor type
     - one or more associated sensors
     - has associated Sensor subclass
     - has associated SensorReading subclass
       - attributes hold sensor readings that must be readonly
     - may have a default sensor
     - has associated supported reporting modes, that must be either
       auto or periodic
     - if it has more than one sensor, it must have a set of
       identifying parameters to select the right sensor to associate
       to each new Sensor object
     - has an abstract operation for constructing a SensorReading object
       - takes the sensor readings emitted by the sensor
       - returns an initialised SensorReading object
       - uses the sensor type's SensorReading subclass
       -
**** Sensor
     - has a set of activated Sensor objects
     - set is initially empty
     - current reading
       - initially null or a SensorReading object cached by user agent
       - cached readings have privacy concerns
     - supports period reporting mode if its sensor type's supported
       reporting mode contains periodic reporting mode
     - reporting flag initially unset
     - current reporting mode initially undefined
     - current polly frequency initially null
     - has abstract operation to retrieve its permission, taking a
       Sensor object as input, returns a permission and its associated
       PermissionDescriptor
*** API
**** Sensor Interface
     #+BEGIN_SRC js
     interface Sensor : EventTarget {
  readonly attribute SensorState state;
  readonly attribute SensorReading? reading;
  void start();
  void stop();
  attribute EventHandler onchange;
  attribute EventHandler onstatechange;
  attribute EventHandler onerror;
};

dictionary SensorOptions {
  double? frequency;
};

enum SensorState {
  "idle",
  "activating",
  "active",
  "errored"
};
     #+END_SRC
     - associated sensor
     - associated state
       - idle (default)
       - activating
       - active
       - errored
     - desired frequency
       - initially null
     - sensor task source
       - initially empty
       - can be enabled or disabled
       - initially enabled
       - enabled: event loop uses it as one of its task sources
     - visibility state of document in top-level browsing context
       changes, the current visibility state is updated - if
       "visible", enable the sensor task source, otherwise, disable it
     - user agents are encouraged to stop sensor polling when sensor
       task sources are disabled to save battery
***** Sensor.state
      - state attribute
      - represents a Sensor's state
      - can be "active"
      - idle (default)
      - activating
      - active
      - errored
***** Sensor.reading
      - when state is "active", reading attribute points to current
        reading, whatever the frequency
***** Sensor.start()
      - runs these steps:
        - if neither idle nor errored state
          - throw an InvalidStateError exception
        - invoke update state with sensor instance and activating
        - sub-steps in parallel
          -
***** Sensor.stop()
      - if either idle or errored, then throw an invalidstateerror exception
      - set reading to null
      - invoke update state with sensor instance and idle
      - invoke unregister a sensor
      - return undefined
***** Sensor.onerror
***** Sensor.onchange
***** Sensor.onstatechange
***** Event handlers
      - onchange
      - onstatechange
      - onerror
**** SensorReading Interface
     - represents state of a sensor
       #+BEGIN_SRC js
       interface SensorReading {
  readonly attribute DOMHighResTimeStamp timeStamp;
};
       #+END_SRC
***** SensorReading.timeStamp
      - returns timestamp of time at which the reading was obtained
        from the sensor
      - expressed in milliseconds passed since time origin
      -
**** SensorReadingEvent interface
     #+BEGIN_SRC js
     [Constructor
(DOMString type
, SensorReadingEventInit eventInitDict
)]
interface SensorReadingEvent : Event {
  readonly attribute SensorReading reading;
};

dictionary SensorReadingEventInit : EventInit {
  SensorReading reading
;
};
     #+END_SRC
***** SensorReadingEvent.reading
      - references current reading at the time of event dispatch
**** SensorErrorEvent Interface
     #+BEGIN_SRC js
     [Constructor
(DOMString type
, SensorErrorEventInit errorEventInitDict
)]
interface SensorErrorEvent : Event {
  readonly attribute Error error;
};

dictionary SensorErrorEventInit : EventInit {
  Error error
;
};
     #+END_SRC
***** SensorErrorEvent.error
*** Abstract Operations
**** Construct Sensor Object
     - input
       - SensorOptions object
     - output
       - Sensor object
     - If not a secure context nor a top-level browsing context, throw
       a SecurityError
*** Example WebIDL for proximity sensors
    #+BEGIN_SRC js
    Constructor(optional ProximitySensorOptions proximitySensorOptions)]
interface ProximitySensor : Sensor {
  readonly attribute ProximitySensorReading? reading;
};

interface ProximitySensorReading : SensorReading {
    readonly attribute unrestricted double distance;
};

dictionary ProximitySensorOptions : SensorOptions {
    double? min = -Infinity;
    double? max = Infinity;
    ProximitySensorPosition? position;
    ProximitySensorDirection? direction;
};
    
enum ProximitySensorPosition {
    "top-left",
    "top",
    "top-right",
    "middle-left",
    "middle",
    "middle-right",
    "bottom-left",
    "bottom",
    "bottom-right"
};

enum ProximitySensorDirection {
    "front",
    "rear",
    "left",
    "right",
    "top",
    "bottom"
};
    #+END_SRC
* Geolocation API
** Main
*** Support
    - Australia: 95.37%
    - Global: 89.43%
    - Whilst support is widespread, you should not depend on it, due
      to privacy concerns.
    - Chrome 50 has just recently come out.
    - Desktop
      - IE 9+
      - Firefox 3.5+
      - Chrome 4.0+
      - Safari 5.0+
      - Opera 10.6+
    - Mobile
      - Chrome 33
      - Firefox 26
      - IE 10
      - Safari 3.2
      - Opera 11
*** Uses
**** [[https://www.smashingmagazine.com/2015/10/takeaways-mobile-web-behavior/][Takeaways From Mobile Web Behavior – Smashing Magazine]]
     - You’ve no doubt experienced the frustration of mistyping or
       forgetting the context of an online form due to a phone’s small
       screen. Because of the difficulty of submitting information,
       around 50% of mobile web users choose to log in via social
       networks in order to avoid having to type in text and remember
       countless passwords. 
     - Well, it doesn’t mean that it will automatically work for every
       website, but you could compare the conversion rate with both
       and see what works best. One thing to keep in mind though is
       that sometimes users might not remember how they logged in or
       signed up last time, so they might end up with a few duplicate
       accounts and start wondering where their data has gone.
     - pre-fill as many input fields as you can
     - http://www.mobilecommercepress.com/geolocation-technology-focus-taken-latest-groupon-app/859403/

** EdX
**** Introduction
     - implemented in most modern browsers
     - Uses different means to get current location:
       - GPS
       - GSM / 3G triangulation
       - Wifi
       - IP address
     - Prompt user to activate GPS, ask for a particular mean among
       those available
     - Track current position when it changes
       - Useful for writing a navigation application
       - Track in real time the position of different participants
     - Support
       - excellent on mobile and desktop!
     - Typical use
       #+BEGIN_SRC js

         navigator.geolocation.getCurrentPosition(showPosition, onError);

         function showPosition(position) {
             console.log("latitude is: " + position.coords.latitude);
             console.log("longitude is: " + position.coords.longitude);
         }

         function onError(err) {
             console.log("Could not get the position");
         }

       #+END_SRC
     - Check support for geolocation API
     - Pass a callback function as a parameter
       - When a current position is available, the callback function
         is called asynchronously, and the input parameter of this
         callback function will be the current position

       - Position object has a coords property - holds the longitude
         and latitude of the object.
**** Properties
     - coords object
       - latitude: latitude of the position
       - longitude: longitude of the position
       - altitude: the altitude of the position
       - accuracy: accuracy of the measure of the longitude and
         latitude (in meters)
       - altitudeAccuracy: accuracy of the measure of the altitude (in
         meters)
       - heading: gives the orientation relative to north, in degrees
       - speed: current speed in meters per second
     - These values may not be available in all Web browsers
**** Geolocation error codes
     - second parameter used for errors
     - on error, gets passed an error object
       - error.code
         - error.TIMEOUT
         - error.PERMISSION_DENIED
         - error.POSITION_UNAVAILABLE
         - error.UNKNOWN_ERROR
**** Tracking a position in real time
     - watchPosition(onSuccess, onError)
     - gets the callback function only when the current position changes
     - returns an id - so you can use clearWatch(id) method to stop
       current tracking
     - Use
       #+BEGIN_SRC js

         // get an id of the current tracking, the showPosition callback is like the one we saw in earlier examples.
         var watchPosId = navigator.geolocation.watchPosition(showPosition);
         
         // stop the tracking
         navigator.geolocation.clearWatch(watchPosId);

       #+END_SRC
     - Options
       - third parameter can hold options
       - enableHighAccuracy
         - boolean
         - indicates that you wish to obtain its most accurate
           readings - use the GPS
         - may or may not make a difference - depending on hardware,
           GPS availability
       - maximumAge
         - integer in milliseconds
         - maximum amount of time the position may remain in the cache
         - appropriate as the device may cache readings to save power
           and / or bandwidth
         - ME: idea - use battery API to increase maximumAge!
       - timeout
         - integer in milliseconds
         - maximum time you are prepared to allow the device to try to
           obtain a Geolocation
         - after this timeout value has elapsed, the onError callback
           is called
         - ME: idea - use network status to decrease or increase
           timeout, or use battery api to decrease timeout
     - example
       #+BEGIN_SRC js
         // Just ask to turn GPS on, if available
         navigator.geolocation.getCurrentPosition(onSuccess, onError,
                                              {enableHighAccuracy:true});
         // maximumAge = 10 mins, the position can be cached for 10 mins,
         // useful when in tunnels...When the device tries to get
         // a position, if it does not succeed, then go on error
         // immediately
         navigator.geolocation.getCurrentPosition(onSuccess, onError,
                                                  {maximumAge:600000, timeout:0});
         // Position will never come from the cache (maximumAge: 0), and
         // if after 0.1s the position could not be computed, then go on
         // error
         navigator.geolocation.getCurrentPosition(onSuccess, onError,
                                                  {maximumAge:0, timeout:100});
         // Ask for GPS, cache for 30s, 27s before going on error...
         watchId=navigator.geolocation.watchPosition(onSuccess, onError,
                                                     {enableHighAccuracy:true, maximumAge:30000, timeout:27000});
       #+END_SRC
**** Practical examples: use the geolocation API together with Google Maps
     - get image centered at longitude and latitude
     - display an interactive google map centered on the current
       position
     - get a physical address from longitude and latitude
     - fill a form's address fields automatically
**** Misc
     - use developer tools to simulate position
** [[http://blog.teamtreehouse.com/exploring-javascript-device-apis]]
   - uses GPS, WiFi
   #+BEGIN_SRC js
     // Get the location.
     navigator.geolocation.getCurrentPosition(function(position) {
         // Get the positioning coordinates.
         var lat = position.coords.latitude;
         var lon = position.coords.longitude;

         // Do something interesting...
     });
   #+END_SRC
** [[http://www.webondevices.com/9-javascript-apis-accessing-device-sensors/][9 JavaScript APIs Accessing Device Sensors]]
   - uses GPS, GSM, Wi-Fi
   - IE9 support
   - code
     #+BEGIN_SRC js
     // Check support
if (navigator.geolocation) {
    navigator.geolocation.getCurrentPosition(success);
}

function success(position) {
    console.log('Latitude: ' + position.coords.latitude);
    console.log('Longitude: ' + position.coords.longitude);
}
     #+END_SRC
** [[https://www.smashingmagazine.com/2013/05/the-state-of-responsive-web-design/][The State of Responsive Web Design]]
   - Another API that would be particularly useful for some mobile
     users is geolocation. The good news is that it’s already well
     supported. This API enables us to geolocate the user using GPS
     and to infer their location from network signals such as IP
     address, RFID, Wi-Fi and Bluetooth MAC addresses. This can be
     used on some responsive websites to provide users with contextual
     information. A big restaurant chain could enhance its mobile
     experience by showing the user the locations of restaurants in
     their area. The possibilities are endless.
** [[https://www.smashingmagazine.com/2015/10/takeaways-mobile-web-behavior/][Takeaways From Mobile Web Behavior – Smashing Magazine]]
   - An increasing number of people like the concept of geolocation,
     which opens a gamut of opportunities for web designers and
     marketers. For example, Groupon presents local offers to
     customers and Google tailors search results according to where
     you are.
   - When geolocation is combined with push notification, marketing
     can really come into play. For example, Starbucks sends potential
     customers a push notification when they walk within a geofence
     around a branch. A geofence is a virtual fence with a
     geographical radius that triggers a tailored update notification,
     offer or coupon to any customer who passes through the area. This
     might be annoying if you push it over the edge, but sending an
     update once and again with user’s consent might be worth
     considering.
   - In order for people to sign up for a geolocation-based service,
     they must trust the brand and the quality of the app and believe
     that something is in it for them. 
   - Your website can go a long way to instilling confidence through
     tone, consistency and branding. As with newsletter registrations,
     always make clear the benefits users will get from registering
     with you, and help users understand that their data will be
     protected and that they will be able to opt out at any time. 
   - As a developer, always bear in mind factors that could cause app
     abandonment. Some of the most common reasons for one- and
     two-star ratings in Apple’s App Store are bugs and overuse of a
     device’s bandwidth or power. For example, a previous version of
     Staples’ app continually used GPS actively and, therefore,
     quickly drained the battery, ultimately discouraging people from
     using the application. 
   - Obvious but worth mentioning: start by going through Apple’s “App
     Programming Guide for iOS” (PDF) to avoid making similar mistakes
     and to ensure that your app delivers a fantastic experience
     without these common pitfalls.
** HTML5 Mobile 2014
   #+BEGIN_SRC js
     if (navigator.geolocation) {
       navigator.geolocation.getCurrentPosition(success, fail);
     }
     function success(position) {
       alert('Latitude: '+ position.coords.latitude + 
       ', Longitude: '+ position.coords.longitude);
     }
                
   #+END_SRC
** HTML5 Mobile Hardware
   - use GPS satellites
   - GSM / CDMA cell IDs
   - A-GPS
   - Wi-Fi Base stations
   - requires access permission
   - code
     #+BEGIN_SRC js
             if (navigator.geolocation) {
                navigator.geolocation.getCurrentPosition(success, fail);
              }

              function success(position) {
                alert('Latitude: '+ position.coords.latitude + 
                ', Longitude: '+ position.coords.longitude);
              }
                

     #+END_SRC
* Media Capture and Streams
** Main
*** Support
    - Desktop
      - Firefox 17+
      - Chrome 21+
      - Opera 12.0 - 12.1 / 18.0+ 
    - Mobile
      - Chrome 33+
      - Firefox 26+
      - Opera Mobile 12+
** [[http://blog.teamtreehouse.com/exploring-javascript-device-apis]]
   - get access to the camera
     #+BEGIN_SRC js
       // Request the camera.
       navigator.getUserMedia(
           // Constraints
           {
               video: true
           },
           // Success Callback
           function(localMediaStream) {
               // Get a reference to the video element on the page.
               var vid = document.getElementById('camera-stream');

               // Create an object URL for the video stream and use this 
               // to set the video source.
               vid.src = window.URL.createObjectURL(localMediaStream);
           },
           // Error Callback
           function(err) {
               // Log the error to the console.
               console.log('The following error occurred when trying to use getUserMedia: ' + err);
           }
       );
     #+END_SRC
* Network Information API
** [[http://www.sitepoint.com/10-html5-apis-worth-looking/]]
*** Network Information APIs
    - discover whether user is on a metered connection
    - provide estimate of bandwidth
    - change behaviour of pages to accommodate user
    - window.navigator.connection property
      - exposes two read only properties: bandwidth, metered
      - bandwidth: represents current bandwidth
      - metered: boolean - true if subject to limitation and bandwidth
        usage
    - support: Firefox 12+, Chrome
** [[https://www.smashingmagazine.com/2013/05/the-state-of-responsive-web-design/][The State of Responsive Web Design]]
   - Another API that has been highly discussed is the network
     information API. The possibility of measuring a user’s bandwidth
     and optimizing accordingly has seduced many developers. We would
     be able to serve high-quality images to users with high bandwidth
     and low-quality images to users with low bandwidth. With the
     bandwidth attribute of the network API, it would be possible to
     estimate the downloading bandwidth of a user in megabytes per
     second. The second attribute, metered, is a Boolean that tells us
     whether the user has a metered connection (such as from a prepaid
     card). These two attributes are currently accessible only via
     JavaScript. 
   - Unfortunately, measuring a user’s connection is technically
     difficult, and a connection could change abruptly. A user could
     go into a tunnel and lose their connection, or their speed could
     suddenly drop. So, a magical media query that measures bandwidth
     looks hypothetical at the moment. Yoav Weiss has written a good
     article about the problems that such a media query would create
     and about bandwidth measurement, “Bandwidth Media Queries? We
     Don’t Need ’Em!” 
** [[https://hacks.mozilla.org/2013/02/using-webapis-to-make-the-web-layer-more-capable/][Using WebAPIs to make the web layer more capable &#x2605; Mozilla Hacks – the...]]
   - code
     #+BEGIN_SRC js
var connection = window.navigator.mozConnection,
    online = connection.bandwidth,
    metered = connection.metered;
 
// online can return:
//    0 when offline
//    Infinity when the bandwidth isn't known
//    Estimation of MB/s
 
// metered implies if the connection is being metered,
//   meaning limited in some way from the ISP
     #+END_SRC

** [[http://alistapart.com/article/environmental-design-with-the-device-api][Environmental Design with the Device API · An A List Apart Article]]
   - size of display does not indicate limited bandwidth
   - low resolution images do not provide the best experience
   - returns connection speed in MB per second
   - provides true / false boolean value of bandwidth being metered in
     any way by the ISP
   - filter assets to manage browser
   - returns a connection of 0 when a user is offline
   - manage assets on page load - but modify interface
   - run energy tests to give estimate about when battery might die
   - detect performance bottlenecks

* Proximity Sensor API
** Support
   - Firefox
** [[http://blog.teamtreehouse.com/exploring-javascript-device-apis]]
   - Feed back data about objects that are close to the device
   - Two events
     - DeviceProximityEvent
       - more accurate
       - provides data about the distance an object is from the device
         and the sensor's field of view
     - UserProximityEvent
       - provides a boolean attribute, near
       - indicates if an object is close to the device or not
   #+BEGIN_SRC js
     // An event listener for a DeviceProximityEvent.
     window.addEventListener('deviceproximity', function(event) {
         // The maximum distance the sensor covers (in cm).
         var max = event.max;

         // The minimum distance the sensor covers (in cm).
         var min = event.min;

         // The device proximity (in cm).
         var proximity = event.value;
     });

     // An event listener for a UserProximityEvent.
     window.addEventListener('userproximity', function(event) {
         if (event.near) {
             // Do something.
         } else {
             // Do something else.
         }
     });
   #+END_SRC
** [[http://www.webondevices.com/9-javascript-apis-accessing-device-sensors/][9 JavaScript APIs Accessing Device Sensors]]
   - proximity sensor found on front of device generally
   - uses measurements to know when you put your phone against your
     ear, or when you reach towards it
   - can tell the distance
   - supported in Firefox
     #+BEGIN_SRC js
       if('ondeviceproximity' in window) {
           // Fired when object is in the detection zone
           window.addEventListener('deviceproximity', function(event) {
               // Object distance in centimeters 
               console.log(event.value + " centimeters");
           });
       } else {
           console.log("deviceproximity not supported");
       }

       if('ondeviceproximity' in window){
           // Fired when object is in the detection zone
           window.addEventListener('userproximity', function(event) {
               if(event.near == true) {
                   console.log("Object is near");
               } else {
                   console.log("Object is far");
               }
           });
       } else {
           console.log("userproximity not supported");
       }
     #+END_SRC
** HTML5 Mobile Hardware
   - http://www.girliemac.com/presentation-slides/html5-mobile-approach/deviceAPIs.html#27
   - distance of a nearby physical object using the proximity sensor
     of a device
   - deviceproximity and userproximity events
     - occur when the sensor detects something closer or further from
       the device
   - code
     #+BEGIN_SRC js
       window.addEventListener('deviceproximity', function(e) {
           alert(e.value);
       });
     #+END_SRC

** [[https://hacks.mozilla.org/2013/02/using-webapis-to-make-the-web-layer-more-capable/][Using WebAPIs to make the web layer more capable &#x2605; Mozilla Hacks – the...]]
   - see how close device is to another object
   - code
     #+BEGIN_SRC js
window.addEventListener("deviceproximity", function (event) { 
    // Current device proximity, in centimeters 
    console.log(event.value); 
 
    // The maximum sensing distance the sensor is  
    // able to report, in centimeters 
    console.log(event.max); 
 
    // The minimum sensing distance the sensor is  
    // able to report, in centimeters 
    console.log(event.min); });
     #+END_SRC

** [[http://www.sitepoint.com/5-javascript-apis-empower-mobile-web-pages/][5 JavaScript APIs to Empower Your Mobile Web Pages]]
   - detect proximity of an object to the device
   - distance measured by proximity sensor
   - no properties or methods
   - fires events on window object
   - deviceproximity: information about the distance between device
     and a nearby object
   - userproximity: specifies when an object is nearby
   - code
     #+BEGIN_SRC js
     if ('ondeviceproximity' in window) {
   // API supported
} else {
   // Not supported
}

window.addEventListener('userproximity', function(event) {
   console.log( (event.near ? '' : 'no ') + 'object detected nearby');
});
     #+END_SRC

** [[http://alistapart.com/article/environmental-design-with-the-device-api][Environmental Design with the Device API · An A List Apart Article]]
   - enables near field communication
   - detect nearby objects enabled with NFC information
   - 
* Phone Calls / Text Messages
** [[http://www.webondevices.com/9-javascript-apis-accessing-device-sensors/][9 JavaScript APIs Accessing Device Sensors]]
   #+BEGIN_SRC html
     <a href="tel:+44703567387625">
       Call number!
     </a>

     <a href="sms:+44703567387625?body=Hello%20there!">
       Compose SMS!
     </a>
   #+END_SRC
* Hardware misc
  - network service discovery?
** Access
   - GPS
   - Camera, video, microphone
   - Audio
   - Vibration
   - Battery
   - NFC
   -
** Sensors
   - Accelerometer
   - Magnetometer
   - Gyrometer
   - Light
   - Proximity
   - Barometer (presure)
   -
* Web Bluetooth API
** [[https://www.broken-links.com/2015/07/23/hardware-apis-coming-to-browsers/][Hardware APIs coming to browsers - Broken Links]]
   - The first is the Web Bluetooth API, which has experimental
     implementation in Chrome OS devices (running the Dev channel,
     behind a flag). This Promise-based API allows the browser to scan
     for local Bluetooth Low Energy (BLE) devices, such as speakers or
     fitness tracking wearables, then interact with them. 
   - Scanning is as easy as requesting a list of local devices,
     filtered by a list of services – for example, to find a BLE
     device which transmits battery data: 
     #+BEGIN_SRC js
     navigator.bluetooth.requestDevice({
  filters: [{ services: ['battery_service'] }]
}).then(function (device) {
  console.log(device.name);
});
     #+END_SRC
* Web NFC API
** [[https://www.broken-links.com/2015/07/23/hardware-apis-coming-to-browsers/][Hardware APIs coming to browsers - Broken Links]]
   - Further from implementation is the Web NFC API, which gives
     access to Near Field Communication devices – such as tap-to-pay
     systems. Currently only at the spec stage, it’s also
     Promise-based so seems easy to get started with. 
   - For example, this is how it’s proposed to read data from an NFC
     device: 
     #+BEGIN_SRC js
       navigator.nfc.requestAdapter().then(function (adapter) {
         adapter.onmessage = function (event) {
           console.log(event.message.data);
         }
       });
     #+END_SRC
* Vibration
** Main
*** Uses
    - accessibility - notifications can use vibration rather than
      sounds or visuals
    - I'm imagining its use in an in-browser music app. Something like
      Bandcamp. If a song fails to load, or there's some other
      important notification, it should vibrate, because the user
      likely isn't looking at the screen. It doesn't have many obvious
      openings for value, but it can potentially be useful to have
      around.
** [[https://www.w3.org/TR/2015/REC-vibration-20150210/][Vibration API]]
   - Has been a W3C Recommendation for over a year!
   - simple, tactile feedback
   -
*** Vibration Interface
    - WebIDL
    #+BEGIN_SRC js
    typedef (unsigned long or sequence<unsigned long>) VibratePattern;

partial interface Navigator {
    boolean vibrate (VibratePattern pattern);
};
    #+END_SRC
    - vibrate() invokes vibration
    - Processing vibration patterns
      - If not a list, add the pattern
      - Max length is an implementation dependent maximum
        - If length is greater than max length, implementation could
          break request into shorter requests to achieve same effect
      - Truncates patterns greater than max length
      - Max duration:
        - implementation dependent
        - 
    - Means that if submitting a pattern, it should be an odd length!
    - Performing vibration
      - may return false e.g. user preferences
      - if vibration is happening, abort current vibration pattern
      - vibrates if even index
      - waits if odd index
*** Examples
    #+BEGIN_SRC js
    // vibrate for 1000 ms
navigator.vibrate(1000);

// or alternatively
navigator.vibrate([1000]);
    #+END_SRC
    #+BEGIN_SRC js
    navigator.vibrate([50, 100, 150]);
    #+END_SRC
    #+BEGIN_SRC js
    // cancel any existing vibrations
navigator.vibrate(0);

// or alternatively
navigator.vibrate([]);
    #+END_SRC
** [[https://www.joezimjs.com/javascript/top-5-9-favorite-html5-apis/]]
*** Vibration
    - Works on phones, tablets.
**** Use cases
     - Used with notifications to get user attention
     - games
**** Support
     - limited on desktop
     - use as an enhancement
**** Use
     - super easy! navigator.vibrate()
     - Can send in a number of milliseconds for the device to vibrate
     - Can send an array of numbers representing multiply vibrations -
       length of time the device vibrates, pause lengths between the vibrations
*** Network Information
    - Depending on connection type
** [[http://www.sitepoint.com/10-html5-apis-worth-looking/]]
*** Vibration API
    - programatically produce a vibration
    - vibrate during the game is reaction to a particular event
    - window.navigator.vibrate() method
      - accepts one parameter, either an integer or array of integers
      - the array is alternating vibration times and pauses
** [[http://blog.teamtreehouse.com/exploring-javascript-device-apis]]
*** Vibration
    #+BEGIN_SRC js
      // Vibrate for 1 second (1000 milliseconds).
      navigator.vibrate(1000);

      // Vibrate in sequence.
      navigator.vibrate([500, 250, 500]);
    #+END_SRC
    - build games, create accessible applications
** [[http://www.webondevices.com/9-javascript-apis-accessing-device-sensors/][9 JavaScript APIs Accessing Device Sensors]]
   - haptic feedback
   - progressive enhancement - works on modern browsers, doesn't break
     anything not supporting it
   - Chrome + Firefox + Opera support
   - code
     #+BEGIN_SRC js
     var vibrate = navigator.vibrate || navigator.mozVibrate;

     // vibrate for 1 second
vibrate(1000);

// vibrate for 1 second, then pause for half, then vibrate for another 1 second
vibrate([1000, 500, 2000]);
     #+END_SRC
** [[https://hacks.mozilla.org/2013/02/using-webapis-to-make-the-web-layer-more-capable/][Using WebAPIs to make the web layer more capable &#x2605; Mozilla Hacks – the...]]
   - code
     #+BEGIN_SRC js
     // Vibrate for one second 
navigator.vibrate(1000);
 
// Vibration pattern [vibrationTime, pause,…] 
navigator.vibrate([200, 100, 200, 100]);
 
// Vibrate for 5 seconds 
navigator.vibrate(5000);
 
// Turn off vibration 
navigator.vibrate(0);
     #+END_SRC
* Wake Lock API
  #+BEGIN_SRC js
//request to keep the display awake when the recipe is showing:
screen.keepAwake = true;

//stop keeping the display awake:
screen.keepAwake = false;
  
  #+END_SRC
